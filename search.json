[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PARE Model",
    "section": "",
    "text": "Point-to-Area Random Effects\nLink to this project’s Github Repo (contains all datasets).\nThis site is a guided tutorial on fitting the Point-to-Area Random Effects model as part of the paper “Spatial-Temporal Extreme Modeling for Point-to-Area Random Effects (PARE)”, presented at SDSS 2023 and submitted to the accompanying special issue of the Journal of Data Science.\nThis paper concerns how to model extreme values when data are available at the point level, but results are desired at the area level.\n\n\n\nA map of the rainfall gauges (point-level data) and the hydrologic regions (areal data) used in the analysis."
  },
  {
    "objectID": "PARE.html#load-data-functions-and-packages",
    "href": "PARE.html#load-data-functions-and-packages",
    "title": "1  PARE model",
    "section": "1.1 Load data, functions, and packages",
    "text": "1.1 Load data, functions, and packages\n\n\nCode\nlibrary(dplyr)\nlibrary(sf)\nlibrary(spdep)\nlibrary(extRemes)\nlibrary(ggplot2)\n\nthresh = 253\n\nstations &lt;- read.csv(\"Data/station_info.csv\")\nstat_nos &lt;- stations[,1]\n\nsource(\"Code/Helper Functions_RealData/format_data.R\")\nsource(\"Code/Helper Functions_RealData/jitter_n_sym.R\")\nsource(\"Code/Helper Functions_RealData/get_sym_car_mat.R\")\nsource(\"Code/Helper Functions_RealData/get_par_car.R\")\nsource(\"Code/Helper Functions_RealData/get_se.R\")\nsource(\"Code/Helper Functions_RealData/pars_to_rl.R\")\nsource(\"Code/Helper Functions_RealData/rl_with_ci.R\")\nsource(\"Code/Helper Functions_RealData/make_varcov_mats_car.R\")\nsource(\"Code/Helper Functions_RealData/rl_ci_to_plot_vec.R\")\nsource(\"Code/Helper Functions_RealData/create_mat.R\")\nsource(\"Code/Helper Functions_RealData/win_rl_to_plot_dat.R\")\nsource(\"Code/Helper Functions_RealData/get_latex_table.R\")"
  },
  {
    "objectID": "PARE.html#format-time-series-of-gpd-fits",
    "href": "PARE.html#format-time-series-of-gpd-fits",
    "title": "1  PARE model",
    "section": "1.2 Format time series of GPD fits",
    "text": "1.2 Format time series of GPD fits\n\n## load watershed data\nws_regs &lt;- sf::read_sf(\"Data/watershed_region_updated\")\nst_crs(ws_regs) &lt;-sf::st_crs(2278)\n\n## window object generated in Fit_GPD.qmd\n## Load rolling GPD fits (takes a bit)\nwindow &lt;- readRDS(\"Data/window_1day_dclust_updated.rds\")  # list of lists (82 x 601) of GPD fits\nwindow_CVM &lt;- readRDS(\"Data/window_CVM_updated.rds\")\nwindow_AD &lt;- readRDS(\"Data/window_AD_updated.rds\")\n\n## Extract windows (note varying # stations)\ndat_win_22 &lt;- format_data(window[[22]], stations, ws_regs, window_CVM[[22]]) # 34\ndat_win_52 &lt;- format_data(window[[52]], stations, ws_regs, window_CVM[[52]]) # 28\ndat_win_82 &lt;- format_data(window[[82]], stations, ws_regs, window_CVM[[82]]) # 149\n\n## save values (faster than reading entire window[[]] object)\nsave(dat_win_22, file = \"Data/dat_win_22\")\nsave(dat_win_52, file = \"Data/dat_win_52\")\nsave(dat_win_82, file = \"Data/dat_win_82\")"
  },
  {
    "objectID": "PARE.html#construct-spatial-weight-matrices",
    "href": "PARE.html#construct-spatial-weight-matrices",
    "title": "1  PARE model",
    "section": "1.3 Construct spatial weight matrices",
    "text": "1.3 Construct spatial weight matrices\n\n\n\n\n\n\nGenerating the Hausdorff matrix\n\n\n\n\n\nThe hausMat function and additional documentation can be found in the hausdorff Github repository.\n\n# (make sure ws_regs is projected first)\ndistMat &lt;- hausMat(ws_regs, f1 = 0.5)\ndistMat/5280\n\n# save output\n# saveRDS(distMat, file = \"~/Documents/GitHub/Spatial_Extreme_Value_Modeling/Data/hMat_med.rds\")\n\n\n\n\n\n# read in previously computed Hausdorff matrix and convert units to miles\nhMat &lt;- readRDS(file = \"Data/hMat_med.rds\")\nhMat_miles &lt;- hMat/5280\n\n## Create weight matrix for each window \n## Accounts for different numbers of stations (varying point-to-area structure)\n## Jiters the values to give valid weight matrix\nset.seed(24)\nD_22 &lt;- get_sym_car_mat(dat_win_22, hMat_miles)\nD_52 &lt;- get_sym_car_mat(dat_win_52, hMat_miles)\nD_82 &lt;- get_sym_car_mat(dat_win_82, hMat_miles)"
  },
  {
    "objectID": "PARE.html#fit-models-to-each-window-for-each-parameter",
    "href": "PARE.html#fit-models-to-each-window-for-each-parameter",
    "title": "1  PARE model",
    "section": "1.4 Fit models to each window for each parameter",
    "text": "1.4 Fit models to each window for each parameter\nTo obtain region-level estimates of the GPD parameters, fit a conditional auto-regressive model for each GPD parameter for each window, a total of 9 models.\n\n## window 22\n## Fit models\ncar_shape_22 &lt;- spatialreg::spautolm(shape ~ -1 + Reg1 + Reg2 + Reg3, \n                                     data = dat_win_22, family=\"CAR\", \n                                     listw=mat2listw(1/D_22, style = \"C\"))\ncar_ln.scale_22 &lt;- spatialreg::spautolm(log(scale) ~ -1 + Reg1 + Reg2 + Reg3, \n                                        data = dat_win_22, family=\"CAR\", \n                                        listw=mat2listw(1/D_22,style = \"C\"))\ncar_rate_22 &lt;- spatialreg::spautolm(rate ~ -1 + Reg1 + Reg2 + Reg3, \n                                    data = dat_win_22, family=\"CAR\", \n                                    listw=mat2listw(1/D_22, style = \"C\"))\n## extract parameter estimates\npar_22 &lt;- get_par_car(car_ln.scale_22, car_shape_22, car_rate_22)\nse_22 &lt;- get_se(car_ln.scale_22, car_shape_22, car_rate_22)[3,]\ncar_varcov_22 &lt;- make_varcov_mats_car(car_ln.scale_22, car_shape_22)  # se of scale 8.5, 4, 9.25\nst_devs_22 &lt;- data.frame(Reg1 = c(sqrt(diag(car_varcov_22[[1]])), se_22[1]),\n                         Reg2 = c(sqrt(diag(car_varcov_22[[2]])), se_22[2]), \n                         Reg3 = c(sqrt(diag(car_varcov_22[[3]])), se_22[3]))\nrow.names(st_devs_22) &lt;- row.names(par_22)\n\n\n\n## window 52\n## Fit models\ncar_shape_52 &lt;- spatialreg::spautolm(shape ~ -1 + Reg1 + Reg2 + Reg3, \n                                     data = dat_win_52, family=\"CAR\", \n                                     listw=mat2listw(1/D_52, style = \"C\"))\ncar_ln.scale_52 &lt;- spatialreg::spautolm(log(scale) ~ -1 + Reg1 + Reg2 + Reg3, \n                                        data = dat_win_52, family=\"CAR\", \n                                        listw=mat2listw(1/D_52, style = \"C\"))\ncar_rate_52 &lt;- spatialreg::spautolm(rate ~ -1 + Reg1 + Reg2 + Reg3, \n                                    data = dat_win_52, family=\"CAR\", \n                                    listw=mat2listw(1/D_52, style = \"C\"))\n## Extract parameter estimates\npar_52 &lt;- get_par_car(car_ln.scale_52, car_shape_52, car_rate_52)\nse_52 &lt;- get_se(car_ln.scale_52, car_shape_52, car_rate_52)[3,]\ncar_varcov_52 &lt;- make_varcov_mats_car(car_ln.scale_52, car_shape_52)  # se of scale 8.5, 4, 9.25\nst_devs_52 &lt;- data.frame(Reg1 = c(sqrt(diag(car_varcov_52[[1]])), se_52[1]),\n                         Reg2 = c(sqrt(diag(car_varcov_52[[2]])), se_52[2]), \n                         Reg3 = c(sqrt(diag(car_varcov_52[[3]])), se_52[3]))\n\n## window 82\n## fit models\ncar_shape_82 &lt;- spatialreg::spautolm(shape ~ -1 + Reg1 + Reg2 + Reg3, \n                                     data = dat_win_82, family=\"CAR\", \n                                     listw=mat2listw(1/D_82, style = \"C\"))\ncar_ln.scale_82 &lt;- spatialreg::spautolm(log(scale) ~ -1 + Reg1 + Reg2 + Reg3, \n                                        data = dat_win_82, family=\"CAR\", \n                                        listw=mat2listw(1/D_82, style = \"C\"))\ncar_rate_82 &lt;- spatialreg::spautolm(rate ~ -1 + Reg1 + Reg2 + Reg3, \n                                    data = dat_win_82, family=\"CAR\", \n                                    listw=mat2listw(1/D_82, style = \"C\"))\n## Extract parameter estiamtes\npar_82 &lt;- get_par_car(car_ln.scale_82, car_shape_82, car_rate_82)\nse_82 &lt;- get_se(car_ln.scale_82, car_shape_82, car_rate_82)[3,]\ncar_varcov_82 &lt;- make_varcov_mats_car(car_ln.scale_82, car_shape_82)  # se of scale 8.5, 4, 9.25\nst_devs_82 &lt;- data.frame(Reg1 = c(sqrt(diag(car_varcov_82[[1]])), se_82[1]),\n                         Reg2 = c(sqrt(diag(car_varcov_82[[2]])), se_82[2]), \n                         Reg3 = c(sqrt(diag(car_varcov_82[[3]])), se_82[3]))\n\n\n1.4.1 Table of parameter estimates\n\n\n[1] \"Parameters\"\n\n\n              Reg1         Reg2         Reg3\nscale 230.85855709 200.15626351 198.45979895\nshape  -0.01912063   0.05329551   0.14923817\nrate    0.02814622   0.03138875   0.03426008\n\n\n[1] \"Standard Errors\"\n\n\n              Reg1         Reg2         Reg3\nscale 5.3213140942 3.0221032163 4.5999740248\nshape 0.0313947819 0.0204812330 0.0315739471\nrate  0.0005872697 0.0003877783 0.0005903755\n\n\n[1] \"Parameters\"\n\n\n              Reg1        Reg2         Reg3\nscale 171.95531347 202.3189569 217.80371166\nshape   0.17232481   0.1340430   0.16194601\nrate    0.02981064   0.0317399   0.03388214\n\n\n[1] \"Standard Errors\"\n\n\n          Reg1         Reg2         Reg3\n1 4.4827004098 2.7176004289 6.6253934853\n2 0.0131459687 0.0067930158 0.0153266094\n3 0.0006522969 0.0003391368 0.0007591396\n\n\n[1] \"Parameters\"\n\n\n              Reg1         Reg2         Reg3\nscale 215.07848444 236.68456472 223.98647293\nshape   0.20456458   0.16327472   0.18610913\nrate    0.05510062   0.04333857   0.05629901\n\n\n[1] \"Standard Errors\"\n\n\n         Reg1        Reg2        Reg3\n1 4.323191261 4.894934168 3.699433095\n2 0.016361115 0.016841083 0.013420936\n3 0.002272369 0.002339033 0.001864008"
  },
  {
    "objectID": "PARE.html#calculate-return-levels-cis",
    "href": "PARE.html#calculate-return-levels-cis",
    "title": "1  PARE model",
    "section": "1.5 Calculate return levels + CIs",
    "text": "1.5 Calculate return levels + CIs\n\n### Estimates and CIs for visuals\ncar_rl_25_22  &lt;- rl_with_ci(par_mat = par_22, \n                            varcov_list = car_varcov_22, \n                            return_period = 25, \n                            type = \"ci\", alpha = 0.05)/254\ncar_rl_100_22 &lt;- rl_with_ci(par_22, car_varcov_22, 100, \"ci\")/254\ncar_rl_500_22 &lt;- rl_with_ci(par_22, car_varcov_22, 500, \"ci\")/254\n\ncar_rl_25_52  &lt;- rl_with_ci(par_52, car_varcov_52, 25, \"ci\")/254\ncar_rl_100_52 &lt;- rl_with_ci(par_52, car_varcov_52, 100, \"ci\")/254\ncar_rl_500_52 &lt;- rl_with_ci(par_52, car_varcov_52, 500, \"ci\")/254\n\ncar_rl_25_82  &lt;- rl_with_ci(par_82, car_varcov_82, 25, \"ci\")/254\ncar_rl_100_82 &lt;- rl_with_ci(par_82, car_varcov_82, 100, \"ci\")/254\ncar_rl_500_82 &lt;- rl_with_ci(par_82, car_varcov_82, 500, \"ci\")/254\n\nwin_1 &lt;- rl_ci_to_plot_vec(car_rl_25_22, car_rl_100_22, car_rl_500_22)\nwin_2 &lt;- rl_ci_to_plot_vec(car_rl_25_52, car_rl_100_52, car_rl_500_52)\nwin_3 &lt;- rl_ci_to_plot_vec(car_rl_25_82, car_rl_100_82, car_rl_500_82)\n\nplot_dat &lt;- win_rl_to_plot_dat(win_1, win_2, win_3)\nreg1 &lt;- plot_dat[[1]] # Region 1 data frame for plotting\nreg2 &lt;- plot_dat[[2]] \nreg3 &lt;- plot_dat[[3]] \n\n\n1.5.1 Visualize return levels\n\nggplot(data=reg1, aes(x=c(1960, 1990, 2020))) + \n    coord_cartesian(ylim = c(3, 41.5)) +\n    geom_line(aes(y=RL_500, color=\"500-Year\", linetype = \"500-Year\")) + geom_point(aes(y=RL_500, color=\"500-Year\")) + geom_ribbon(aes(ymin=LB_500, ymax=UB_500), alpha=0.07, fill=\"darkblue\") +\n    geom_line(aes(y=RL_100, color=\"100-Year\", linetype = \"100-Year\")) + geom_point(aes(y=RL_100, color=\"100-Year\"))+ geom_ribbon(aes(ymin=LB_100, ymax=UB_100), alpha=0.07, fill=\"blue\") +\n    geom_line(aes(y=RL_25, color=\"25-Year\", linetype = \"25-Year\")) + geom_point(aes(y=RL_25, color=\"25-Year\")) + geom_ribbon(aes(ymin=LB_25, ymax=UB_25), alpha=0.15, fill=\"lightblue\") +\n    labs(x=\"Last Year of 40-Year Window\", y=\"Return Level (in)\", title=\"Estimated Return Levels - Model 1 - Region 1\") +\n    scale_colour_manual(name = \"Return Period\", values = c('500-Year' = \"darkblue\", '100-Year' = \"blue\", '25-Year' = \"lightblue\"), breaks = c('500-Year', '100-Year', '25-Year'))+\n    scale_linetype_manual(values = c(\"500-Year\" = \n    \"twodash\", \"100-Year\" = \"longdash\", \"25-Year\" = \"solid\"), breaks = c('500-Year', '100-Year', '25-Year'), name = \"Return Period\") + guides(colour = guide_legend(override.aes = list(shape = NA)))\n\n\n\nggplot(data=reg2, aes(x=c(1960, 1990, 2020))) + \n  coord_cartesian(ylim = c(3, 41.5)) +\n  geom_line(aes(y=RL_500, color=\"500-Year\", linetype = \"500-Year\")) + geom_point(aes(y=RL_500, color=\"500-Year\")) + geom_ribbon(aes(ymin=LB_500, ymax=UB_500), alpha=0.07, fill=\"darkred\") +\n  geom_line(aes(y=RL_100, color=\"100-Year\", linetype = \"100-Year\")) + geom_point(aes(y=RL_100, color=\"100-Year\"))+ geom_ribbon(aes(ymin=LB_100, ymax=UB_100), alpha=0.07, fill=\"red\") +\n  geom_line(aes(y=RL_25, color=\"25-Year\", linetype = \"25-Year\")) + geom_point(aes(y=RL_25, color=\"25-Year\")) + geom_ribbon(aes(ymin=LB_25, ymax=UB_25), alpha=0.15, fill=\"pink\") +\n  labs(x=\"Last Year of 40-Year Window\", y=\"Return Level (in)\", title=\"Estimated Return Levels - Model 1 - Region 2\") +\n  scale_colour_manual(name = \"Return Period\", values = c('500-Year' = \"darkred\", '100-Year' = \"red\", '25-Year' = \"pink\"),\n                      breaks = c('500-Year', '100-Year', '25-Year'))+\n    scale_linetype_manual(values = c(\"500-Year\" = \n    \"twodash\", \"100-Year\" = \"longdash\", \"25-Year\" = \"solid\"), breaks = c('500-Year', '100-Year', '25-Year'), name = \"Return Period\") + guides(colour = guide_legend(override.aes = list(shape = NA)))\n\n\n\nggplot(data=reg3, aes(x=c(1960, 1990, 2020))) + \n    coord_cartesian(ylim = c(3, 41.5)) +\n    geom_line(aes(y=RL_500, color=\"500-Year\", linetype = \"500-Year\")) + geom_point(aes(y=RL_500, color=\"500-Year\")) + geom_ribbon(aes(ymin=LB_500, ymax=UB_500), alpha=0.3, fill=\"#256e3a\") +\n    geom_line(aes(y=RL_100, color=\"100-Year\", linetype = \"100-Year\")) + geom_point(aes(y=RL_100, color=\"100-Year\"))+ geom_ribbon(aes(ymin=LB_100, ymax=UB_100), alpha=0.2, fill=\"#5d916c\") +\n    geom_line(aes(y=RL_25, color=\"25-Year\" , linetype = \"25-Year\")) + geom_point(aes(y=RL_25, color=\"25-Year\")) + geom_ribbon(aes(ymin=LB_25, ymax=UB_25), alpha=0.15, fill=\"#44c96a\") +\n    labs(x=\"Last Year of 40-Year Window\", y=\"Return Level (in)\", title=\"Estimated Return Levels - Model 1 - Region 3\") +\n    scale_colour_manual(name = \"Return Period\",\n                        values = c('500-Year' = \"#256e3a\", '100-Year' = \"#5d916c\", '25-Year' = \"#44c96a\"),\n                        breaks = c('500-Year', '100-Year', '25-Year')) +\n    scale_linetype_manual(values = c(\"500-Year\" = \n    \"twodash\", \"100-Year\" = \"longdash\", \"25-Year\" = \"solid\"), breaks = c('500-Year', '100-Year', '25-Year'), name = \"Return Period\") + guides(colour = guide_legend(override.aes = list(shape = NA)))\n\n\n\n\n\n\n1.5.2 Table of return levels\n\n## Table 6\ncar_rl_25_22_se  &lt;- rl_with_ci(par_mat = par_22, \n                            varcov_list = car_varcov_22, \n                            return_period = 25, \n                            type = \"se\", alpha = 0.05)/254\ncar_rl_100_22_se &lt;- rl_with_ci(par_22, car_varcov_22, 100, \"se\")/254\ncar_rl_500_22_se &lt;- rl_with_ci(par_22, car_varcov_22, 500, \"se\")/254\n\n## latex output\n#car_rl_22_list &lt;- list(car_rl_25_22_se, car_rl_100_22_se, car_rl_500_22_se)\n#get_latex_table_RL(car_rl_22_list)\n\nrbind(t(car_rl_25_22_se), t(car_rl_100_22_se), t(car_rl_500_22_se))\n\n               Reg1      Reg2       Reg3\n25-yr RL  5.7812602 6.2000477  8.1017057\nSE        0.4268857 0.3273666  0.7538876\n100-yr RL 6.8995253 7.7328867 10.9382561\nSE        0.6450349 0.5268412  1.3344426\n500-yr RL 8.1611487 9.6604967 15.0588530\nSE        0.9508076 0.8372663  2.3736256\n\n## Table 7\ncar_rl_25_52_se  &lt;- rl_with_ci(par_52, car_varcov_52, 25, \"se\")/254\ncar_rl_100_52_se &lt;- rl_with_ci(par_52, car_varcov_52, 100, \"se\")/254\ncar_rl_500_52_se &lt;- rl_with_ci(par_52, car_varcov_52, 500, \"se\")/254\n\n# Latex output\n#car_rl_52_list &lt;- list(car_rl_25_52_se, car_rl_100_52_se, car_rl_500_52_se)\n#get_latex_table_RL(car_rl_52_list)\nrbind(t(car_rl_25_52_se), t(car_rl_100_52_se), t(car_rl_500_52_se))\n\n                Reg1       Reg2       Reg3\n25-yr RL   7.3910220  7.7591772  9.1036876\nSE         0.3201394  0.1732745  0.4792676\n100-yr RL 10.1767483 10.3537503 12.4771511\nSE         0.5586972  0.2883097  0.8222935\n500-yr RL 14.3667665 14.0375739 17.4724334\nSE         0.9991024  0.4890933  1.4436359\n\n## TABLE 3\ncar_rl_25_82_se  &lt;- rl_with_ci(par_82, car_varcov_82, 25, \"se\")/254\ncar_rl_100_82_se &lt;- rl_with_ci(par_82, car_varcov_82, 100, \"se\")/254\ncar_rl_500_82_se &lt;- rl_with_ci(par_82, car_varcov_82, 500, \"se\")/254\n\n# Latex output\n#car_rl_82_list &lt;- list(car_rl_25_82_se, car_rl_100_82_se, car_rl_500_82_se)\n#get_latex_table_RL(car_rl_82_list)\n\nrbind(t(car_rl_25_82_se), t(car_rl_100_82_se), t(car_rl_500_82_se))\n\n                Reg1       Reg2       Reg3\n25-yr RL  11.6342489 10.4422599 11.3992557\nSE         0.6873749  0.5856544  0.5461398\n100-yr RL 16.4795690 14.2913625 15.8560177\nSE         1.2435110  1.0239273  0.9666489\n500-yr RL 24.1305826 20.0023744 22.7002292\nSE         2.3097267  1.8186075  1.7503929"
  },
  {
    "objectID": "KrigingRegionalMax.html",
    "href": "KrigingRegionalMax.html",
    "title": "2  Block Kriging and Regional Max code",
    "section": "",
    "text": "The code in the previous few files has been curated for ease-of-use with a focus on the PARE model, which is the novel part of the paper.\nCode for all three models PARE, Block Kriging, and Regional Max methods the full analysis as originally included in is available on Github."
  },
  {
    "objectID": "Fit_GPD.html#setup-and-declustering",
    "href": "Fit_GPD.html#setup-and-declustering",
    "title": "3  Fitting GPD to moving windows",
    "section": "3.1 Setup and Declustering",
    "text": "3.1 Setup and Declustering\n\n# Recall PRCP = Precipitation is measured as \"tenths of mm\"   (254 = 1 inch)\n# To get inches: x/254\n# To get mm: x/10\n\nlibrary(lubridate)\nlibrary(extRemes)\nlibrary(stats)\nlibrary(dplyr)\nlibrary(xts)\nlibrary(gnFit)\nlibrary(ismev)\n# library(tseries)\n# library(trend)\n# library(astsa)\n# library(ggmap)\n\n\n# Load in the precipitation data\nprecip &lt;- read.csv(\"../scrape-NOAA-data/Data/all_stations_precip_UDP_updated_2021.csv\")  \n\n### Declustering\nprecip_dclust = precip\nfor ( i in seq(from=2, to=length(precip[1,]))){\n  station = precip[,i]\n  non_na = which(station&gt;=0)\n  station[is.na(station)] &lt;- 0\n  \n  dec = extRemes::decluster(station, threshold=0, clusterfun = \"max\", replace.with = 0)\n  stat_clus = as.numeric(dec)\n  \n  station = stat_clus\n  precip_dclust[non_na,i] = station[non_na]\n}\n\n### format\nprecip_dclust[,1] &lt;- lubridate::ymd(as.character(precip_dclust[,1])) #put Date column into date format\nprecip_dclust &lt;- as.data.frame(precip_dclust) #make it a data frame\n\n### Set threshold\nthresh &lt;- 253   # for 1-day"
  },
  {
    "objectID": "Fit_GPD.html#fit-gpd-to-entire-series-by-station",
    "href": "Fit_GPD.html#fit-gpd-to-entire-series-by-station",
    "title": "3  Fitting GPD to moving windows",
    "section": "3.2 Fit GPD to entire series by station",
    "text": "3.2 Fit GPD to entire series by station\n\n## NOTE: suppressing some warnings and errors which do not impact the analysis-- they are an artifact of the extent/format of the data (e.g. NAs from before stations were collecting data)\n\n# Distribution Fits -------------------------------------------------------\n\nnumstat &lt;- numrow &lt;- 601 #stations\n#numcol &lt;- 79 #moving windows (this number will change with the new data since we have more years, old data was 1900-2017)\nnumcol &lt;- (2020-39)-1900 +1 \n  #2020-39 will get the starting year for the last window\n  #1900 is the starting year but it is not counted in the math, hence the +1\n\nsource(\"Code/HelperFunctions_GPD/fitgpdR.R\")\n\n# Fit to entire station length --------------------------------------------\n\n# Fitting GPD to entire length of data for each station\nfullfits &lt;- fitgpdR(precip_dclust, thresh)\n# which(is.na(fullfits))  # only a few are NA\n\n\n\nsource(\"Code/HelperFunctions_GPD/gof.R\")\nsource(\"Code/HelperFunctions_GPD/data_no_na.R\")\nsource(\"Code/HelperFunctions_GPD/gof_fix_error.R\")\nfulldata_no_na &lt;- data_no_na(precip_dclust, thresh)  # saving data corresponding to fullfits\n\n## Goodness of fit measures\nCVMp &lt;- ADp &lt;- NULL\nfor(h in c(1:numstat)){ # for some reason 481 was not working with gof fn, so use gof_fix_error  #but it has &lt;1 year in length so will be eliminated anyway\n  if(!sum(is.na(fullfits[[h]]))){\n    gof_h &lt;- gof_fix_error(fulldata_no_na[[h]], dist=\"gpd\", pr=fullfits[[h]]$results$par, threshold=thresh)\n    CVMp[h] &lt;- gof_h$Wpval\n    ADp[h]  &lt;- gof_h$Apval\n  }else{\n    CVMp[h] &lt;- ADp[h]  &lt;- NA\n  }\n}"
  },
  {
    "objectID": "Fit_GPD.html#gpd-moving-window-fits",
    "href": "Fit_GPD.html#gpd-moving-window-fits",
    "title": "3  Fitting GPD to moving windows",
    "section": "3.3 GPD moving window fits",
    "text": "3.3 GPD moving window fits\nThis code chunk generates the “window” file which is the starting point for the PARE model. It will take some time to run and the resulting file is about 1.6 Gb.\n\n# All Stations - 40-Year Windows ------------------------------------------\n\n# Eventually we will want these fits for all of the 40-year windows, but for now we can just fit to the most recent 40 years.\n\n\n### Uncomment if you want to run from scratch- Note: will take about an hour\n### You can instead load the .rds file below to load a saved copy (see readRDS line below)\n\n# ### 40-YEAR MOVING WINDOWS ///////////////\n#numcol &lt;- 79 #windows of 40\nnumcol &lt;- (2020-39)-1900 +1 \nstartday &lt;- \"-01-01\"\nendday &lt;- \"-12-31\"\nwindow &lt;- list()\nlabelyr &lt;- NULL   # end year of window\n\n# to access window j, gpdfit for station i, use window[[j]][[i]]\n\nstartyr &lt;- 1900\n## Takes awhile to run\n# for(j in 1:numcol){\n#   start &lt;- paste0(startyr, startday)\n#   endyr &lt;- startyr + 39\n#   end &lt;- paste0(endyr, endday)\n#   labelyr[j] &lt;- lubridate::year(as.Date(end))\n# \n#   start &lt;- which(precip_dclust$Date==start)  #finding indexes corresponding to start & end dates\n#   end   &lt;- which(precip_dclust$Date==end)\n#   sub &lt;- precip_dclust[start:end, ]  #subset data to those 40 years\n#   window[[j]] &lt;- fitgpdR(sub, thresh)   # GPD fit with extRemes package\n# \n#   startyr &lt;- startyr + 1\n# }\n# \n\n## Large file-- takes time to save/load\n#saveRDS(window, file=\"Data/window_1day_dclust_updated.rds\")\n\n#window &lt;- readRDS(file=\"Data/window_1day_dclust_updated.rds\")\n## file too big for quarto to load-- could try some of the solutions listed"
  },
  {
    "objectID": "Fit_GPD.html#calculate-return-levels",
    "href": "Fit_GPD.html#calculate-return-levels",
    "title": "3  Fitting GPD to moving windows",
    "section": "3.4 Calculate return levels",
    "text": "3.4 Calculate return levels\nUsing the GPD parameter estimates to calculate the return level estimates.\n\n# Saving Return Levels for Easy Plotting ----------------------------------\n\n# in mm\n# this is set up differently for easier plotting\n# saving vector of RLs for each station across 79 windows\n\ntrend_RL &lt;- list()\nfor(i in 1:numstat){\n  RL &lt;- NULL\n  for(j in 1:numcol){\n    fit &lt;- window[[j]][[i]]\n    if(!sum(is.na(fit)) == TRUE){\n      RL[j] &lt;- extRemes::return.level(fit, return.period=100)/10  # divide by 10 to get mm\n    }else{\n      RL[j] &lt;- NA\n    }\n  }\n  trend_RL[[i]] &lt;- RL\n}\n\n# trend_RL[[588]] # Hobby\n\ntrend_RL_25 &lt;- list()\ntrend_RL_100 &lt;- list()\ntrend_RL_500 &lt;- list()\nfor(i in 1:numstat){\n  RL_25 &lt;- RL_100 &lt;- RL_500 &lt;- NULL\n  for(j in 1:numcol){\n    fit &lt;- window[[j]][[i]]\n    if(!sum(is.na(fit)) == TRUE){\n      RL_25[j] &lt;- extRemes::return.level(fit, return.period=25)/10  # divide by 10 to get mm\n      RL_100[j] &lt;- extRemes::return.level(fit, return.period=100)/10  # divide by 10 to get mm\n      RL_500[j] &lt;- extRemes::return.level(fit, return.period=500)/10  # divide by 10 to get mm\n    }else{\n      RL_25[j] &lt;- RL_100[j] &lt;- RL_500[j] &lt;- NA\n    }\n  }\n  trend_RL_25[[i]]  &lt;- RL_25\n  trend_RL_100[[i]] &lt;- RL_100\n  trend_RL_500[[i]] &lt;- RL_500\n}\n\n\n#labelyr &lt;- 1939:2017\nlabelyr &lt;- 1939:2020"
  },
  {
    "objectID": "Fit_GPD.html#goodness-of-fit-measures",
    "href": "Fit_GPD.html#goodness-of-fit-measures",
    "title": "3  Fitting GPD to moving windows",
    "section": "3.5 Goodness of fit measures",
    "text": "3.5 Goodness of fit measures\nThis code chunk performs goodness of fit tests to determine for each of the rolling windows which of the stations have achieved a good fit to the GPD distribution. These goodness-of-fit results are used in the extreme value model fitting process as part of the data cleaning. The spatial models are only applied to stations which do not show evidence of a lack of GPD fit for a particular window.\n\n# Goodness of Fit ---------------------------------------------------------\n# Now going to do GOF for ALL stations, for EACH WINDOW FIT\n### Should save RDS to access saved output instead of having to run again\nwindow_CVM &lt;- matrix(nrow = numstat, ncol = numcol)\nwindow_AD &lt;- matrix(nrow = numstat, ncol = numcol)\nfor(j in 1:numcol){\n  CVMp &lt;- ADp &lt;- NULL\n  for(i in 1:numstat){\n    fit &lt;- window[[j]][[i]]\n    if(!sum(is.na(fit)) == TRUE){\n      gof_h &lt;- gof_fix_error(fit$x, dist=\"gpd\", pr=fit$results$par, threshold=thresh)   # New gof function which corrects for errors by rounding\n      CVMp[i] &lt;- gof_h$Wpval\n      ADp[i] &lt;- gof_h$Apval\n    }else{\n      CVMp[i] &lt;- ADp[i] &lt;- NA\n    }\n  }\n  window_CVM[, j] &lt;- CVMp\n  window_AD[, j] &lt;- ADp\n}\nwindow_CVM &lt;- as.data.frame(window_CVM)\nwindow_AD &lt;- as.data.frame(window_AD)\n\n # saveRDS(window_CVM, file=\"Data/window_CVM_updated.rds\")\n # saveRDS(window_AD, file=\"Data/window_AD_updated.rds\")\n\nwindow_CVM &lt;- readRDS(\"Data/window_CVM_updated.rds\")\nwindow_AD &lt;- readRDS(\"Data/window_AD_updated.rds\")\n\n# window_CVM[i, j] gives CVM (Cramer Von Mises) p-value for station i, window j  (similar for AD is Anderson Darling)\n# window[[j]][[i]] gives gpd fit output for station i, window j"
  }
]